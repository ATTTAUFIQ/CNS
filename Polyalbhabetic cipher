public class PolyalphabeticCipher {

    // Function to generate the key in a cyclic manner until its length matches the length of the original text
    public static String generateKey(String text, String key) {
        int x = text.length();

        for (int i = 0; ; i++) {
            if (x == i)
                i = 0;
            if (key.length() == text.length())
                break;
            key += (key.charAt(i));
        }
        return key;
    }

    // Function to encrypt the text using the key
    public static String encrypt(String text, String key) {
        String cipherText = "";

        for (int i = 0; i < text.length(); i++) {
            // converting in range 0-25
            int x = (text.charAt(i) + key.charAt(i)) % 26;

            // convert into alphabets(ASCII)
            x += 'A';

            cipherText += (char) (x);
        }
        return cipherText;
    }

    // Function to decrypt the cipher text using the key
    public static String decrypt(String cipherText, String key) {
        String origText = "";

        for (int i = 0; i < cipherText.length(); i++) {
            // converting in range 0-25
            int x = (cipherText.charAt(i) - key.charAt(i) + 26) % 26;

            // convert into alphabets(ASCII)
            x += 'A';
            origText += (char) (x);
        }
        return origText;
    }

    public static void main(String[] args) {
        String text = "HELLO";
        String key = "KEY";

        String generatedKey = generateKey(text, key);
        String cipherText = encrypt(text, generatedKey);

        System.out.println("Original Text: " + text);
        System.out.println("Generated Key: " + generatedKey);
        System.out.println("Encrypted Text: " + cipherText);
        System.out.println("Decrypted Text: " + decrypt(cipherText, generatedKey));
    }
}
